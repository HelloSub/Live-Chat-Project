<div class="container-fluid">
  <div class="row">
    <h2>Realtime Chat Application</h2>
    <hr>
  </div>
  <div class="row">
    <div class="col-sm-5">
      <div class="form-group">
        <label for="username">Username</label>
        <input type="text" [(ngModel)]="user" class="form-control" id="username" placeholder="Enter username">
        <!-- <small id="userHelp" class="form-text text-muted">Type your username.</small> -->
      </div>
    </div>
    <div class="col-sm-5">
      <label for="roomInput">Choose room</label>
      <select name="roomInput" id="roomInput" class="form-control" [(ngModel)]="room">
        <option value="Group-Chat-1">Group-Chat-1</option>
        <option value="Group-Chat-2">Group-Chat-2</option>
        <option value="Group-Chat-3">Group-Chat-3</option>
      </select>
    </div>
    <div class="col sm-2">
      <div style="margin-top:19px;" class="pull-right">
        <button type="button" class="btn btn-primary me-2" (click)="join()">Join</button>
        <button type="button" class="btn btn-danger " (click)="leave()">Leave</button>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="well" style="height: 200px;padding:15px;">

      <div *ngFor="let item of messageArray">
        <span><strong>{{item.user}}:</strong>{{item.message}}</span>

      </div>
    </div>
  </div>

  <div class="row">
    <div class="well" style="height:200px; padding:15px;">
      <div>

      </div>
      <div class="row">
        <div class="col-sm-10">
          <input type="text" class="form-control" [(ngModel)]="messageText">
        </div>
        <div class="col-sm-2">
          <button type="button" class="btn btn-success pull-right" (click)="sendMessage()">Send</button>
        </div>
      </div>
    </div>



import { AppModule } from './app.module';
import { Socket } from 'socket.io-client';
import { Component, OnInit } from '@angular/core';
import { ChatService } from './chat.service';
import { FormControl, FormGroup } from '@angular/forms';
// import * as io from 'socket.io-client'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
  providers: [ChatService],
})
export class AppComponent implements OnInit {
  [x: string]: any;
  user!: String;
  room!: String;
  messageArray: Array<{ user: string; message: string }> = [];
  messageText!: string;

  numberOfOnlineUsers!: number;
  socket: any;
  userList: Array<{ user: string }> = [];
  displayVal: string = '';
  // socket;

  constructor(private _chatService: ChatService) {
    // this.socket = io();
    this._chatService
      .newUserJoined()
      .subscribe((data) => this.messageArray.push(data));

    this._chatService
      .userLeftRoom()
      .subscribe((data) => this.messageArray.push(data));

    this._chatService
      .newMessageReceived()
      .subscribe((data) => this.messageArray.push(data));
  }
  ngOnInit(): void {
    // this.socket.on('numberOfOnlineUser', (numberOfOnlineUsers: number) => {
    //   this.numberOfOnlineUsers = numberOfOnlineUsers;
    // });
  }

  join(val: string) {
    this._chatService.joinRoom({ user: this.user, room: this.room });
    console.log(val);
    this.displayVal = val;
  }

  leave() {
    this._chatService.leaveRoom({ user: this.user, room: this.room });
    this._chatService.disconnect();
  }
  sendMessage() {
    this._chatService.sendMessage({
      user: this.user,
      room: this.room,
      message: this.messageText,
    });
    const element = document.createElement('div');
    element.innerHTML = this.messageText;
    element.style.background = 'white';
    element.style.padding = '15px-30px';
    element.style.margin = '10px';
    element.style.textAlign = 'right';
    document.getElementById('message-list')?.appendChild(element);
    this.messageText = '';
  }
}
